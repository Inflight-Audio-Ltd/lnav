#
# @synopsis: pg-annotate-errors
# @description: Annotate errors found in the log with the statement highlighted
#

;SELECT
   '```sql' || char(10) || substr(stmt_body, 1, CASE WHEN error_line_end > 0 THEN char_offset + error_line_end ELSE length(stmt_body) END) || char(10) || '```' || char(10) ||
   '> <span style="white-space: nowrap">' || replicate(' ', CASE WHEN error_line_start > 1 THEN error_line_start - 2 ELSE char_offset - 1 END) || '<span class="-lnav_log-level-styles_error">' || replicate('^', length(token)) || '</span> ' || err_body || '</span>' || char(10) AS content
 FROM (
   SELECT
     token,
     err_body,
     char_offset,
     instr(reverse(substr(stmt_body, 1, char_offset)), char(10)) AS error_line_start,
     instr(substr(stmt_body, char_offset), char(10)) AS error_line_end,
     stmt_body
   FROM (
     SELECT
       all_logs.log_body AS err_body,
       regexp_replace(pg_stmt_log.log_body, '\n\t|\n {8}', char(10)) AS stmt_body,
       regexp_match('"(.+)".+at character \d+$', all_logs.log_body) AS token,
       CAST(regexp_match('".+".+at character (\d+)$', all_logs.log_body) AS INTEGER) AS char_offset
     FROM all_logs
     LEFT JOIN all_logs pg_stmt_log ON pg_stmt_log.log_line = all_logs.log_line + 1
     WHERE all_logs.log_line = log_msg_line()
   )
  )
:echo $content
